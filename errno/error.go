/*
Copyright Â© 2022 Mike Messmore <mike@messmore.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package errno

import (
	"fmt"
	"log"
	"os"
	"strings"
)

type Errno struct {
	Name    string
	Value   int
	Message string
}

var ErrnosStr = make(map[string]Errno)
var ErrnosInt = make(map[int]Errno)

func OutputStr(name string, useMessage bool) {
	name = strings.ToUpper(name)
	e, ok := ErrnosStr[name]
	if !ok {
		log.Printf("ERROR: No such errno code: %s", name)
		os.Exit(1)
	}
	fmt.Printf("%s=%d\n", e.Name, e.Value)
	if useMessage {
		fmt.Printf("%s_MSG=\"%s\"\n", e.Name, e.Message)
	}
}

func OutputInt(val int, useMessage bool) {
	e, ok := ErrnosInt[val]
	if !ok {
		log.Printf("ERROR: No such errno code: %d", val)
		os.Exit(1)
	}
	fmt.Printf("%s=%d\n", e.Name, e.Value)
	if useMessage {
		fmt.Printf("%s_MSG=\"%s\"\n", e.Name, e.Message)
	}
}

func init() {
	// generated by running
	// awk -f gen.awk /usr/include/asm-generic/errno-base.h

	// EPERM: 1
	ErrnosStr["EPERM"] = Errno{
		Name:    "EPERM",
		Value:   1,
		Message: "Operation not permitted",
	}

	ErrnosInt[1] = Errno{
		Name:    "EPERM",
		Value:   1,
		Message: "Operation not permitted",
	}

	// ENOENT: 2
	ErrnosStr["ENOENT"] = Errno{
		Name:    "ENOENT",
		Value:   2,
		Message: "No such file or directory",
	}

	ErrnosInt[2] = Errno{
		Name:    "ENOENT",
		Value:   2,
		Message: "No such file or directory",
	}

	// ESRCH: 3
	ErrnosStr["ESRCH"] = Errno{
		Name:    "ESRCH",
		Value:   3,
		Message: "No such process",
	}

	ErrnosInt[3] = Errno{
		Name:    "ESRCH",
		Value:   3,
		Message: "No such process",
	}

	// EINTR: 4
	ErrnosStr["EINTR"] = Errno{
		Name:    "EINTR",
		Value:   4,
		Message: "Interrupted system call",
	}

	ErrnosInt[4] = Errno{
		Name:    "EINTR",
		Value:   4,
		Message: "Interrupted system call",
	}

	// EIO: 5
	ErrnosStr["EIO"] = Errno{
		Name:    "EIO",
		Value:   5,
		Message: "I/O error",
	}

	ErrnosInt[5] = Errno{
		Name:    "EIO",
		Value:   5,
		Message: "I/O error",
	}

	// ENXIO: 6
	ErrnosStr["ENXIO"] = Errno{
		Name:    "ENXIO",
		Value:   6,
		Message: "No such device or address",
	}

	ErrnosInt[6] = Errno{
		Name:    "ENXIO",
		Value:   6,
		Message: "No such device or address",
	}

	// E2BIG: 7
	ErrnosStr["E2BIG"] = Errno{
		Name:    "E2BIG",
		Value:   7,
		Message: "Argument list too long",
	}

	ErrnosInt[7] = Errno{
		Name:    "E2BIG",
		Value:   7,
		Message: "Argument list too long",
	}

	// ENOEXEC: 8
	ErrnosStr["ENOEXEC"] = Errno{
		Name:    "ENOEXEC",
		Value:   8,
		Message: "Exec format error",
	}

	ErrnosInt[8] = Errno{
		Name:    "ENOEXEC",
		Value:   8,
		Message: "Exec format error",
	}

	// EBADF: 9
	ErrnosStr["EBADF"] = Errno{
		Name:    "EBADF",
		Value:   9,
		Message: "Bad file number",
	}

	ErrnosInt[9] = Errno{
		Name:    "EBADF",
		Value:   9,
		Message: "Bad file number",
	}

	// ECHILD: 10
	ErrnosStr["ECHILD"] = Errno{
		Name:    "ECHILD",
		Value:   10,
		Message: "No child processes",
	}

	ErrnosInt[10] = Errno{
		Name:    "ECHILD",
		Value:   10,
		Message: "No child processes",
	}

	// EAGAIN: 11
	ErrnosStr["EAGAIN"] = Errno{
		Name:    "EAGAIN",
		Value:   11,
		Message: "Try again",
	}

	ErrnosInt[11] = Errno{
		Name:    "EAGAIN",
		Value:   11,
		Message: "Try again",
	}

	// ENOMEM: 12
	ErrnosStr["ENOMEM"] = Errno{
		Name:    "ENOMEM",
		Value:   12,
		Message: "Out of memory",
	}

	ErrnosInt[12] = Errno{
		Name:    "ENOMEM",
		Value:   12,
		Message: "Out of memory",
	}

	// EACCES: 13
	ErrnosStr["EACCES"] = Errno{
		Name:    "EACCES",
		Value:   13,
		Message: "Permission denied",
	}

	ErrnosInt[13] = Errno{
		Name:    "EACCES",
		Value:   13,
		Message: "Permission denied",
	}

	// EFAULT: 14
	ErrnosStr["EFAULT"] = Errno{
		Name:    "EFAULT",
		Value:   14,
		Message: "Bad address",
	}

	ErrnosInt[14] = Errno{
		Name:    "EFAULT",
		Value:   14,
		Message: "Bad address",
	}

	// ENOTBLK: 15
	ErrnosStr["ENOTBLK"] = Errno{
		Name:    "ENOTBLK",
		Value:   15,
		Message: "Block device required",
	}

	ErrnosInt[15] = Errno{
		Name:    "ENOTBLK",
		Value:   15,
		Message: "Block device required",
	}

	// EBUSY: 16
	ErrnosStr["EBUSY"] = Errno{
		Name:    "EBUSY",
		Value:   16,
		Message: "Device or resource busy",
	}

	ErrnosInt[16] = Errno{
		Name:    "EBUSY",
		Value:   16,
		Message: "Device or resource busy",
	}

	// EEXIST: 17
	ErrnosStr["EEXIST"] = Errno{
		Name:    "EEXIST",
		Value:   17,
		Message: "File exists",
	}

	ErrnosInt[17] = Errno{
		Name:    "EEXIST",
		Value:   17,
		Message: "File exists",
	}

	// EXDEV: 18
	ErrnosStr["EXDEV"] = Errno{
		Name:    "EXDEV",
		Value:   18,
		Message: "Cross-device link",
	}

	ErrnosInt[18] = Errno{
		Name:    "EXDEV",
		Value:   18,
		Message: "Cross-device link",
	}

	// ENODEV: 19
	ErrnosStr["ENODEV"] = Errno{
		Name:    "ENODEV",
		Value:   19,
		Message: "No such device",
	}

	ErrnosInt[19] = Errno{
		Name:    "ENODEV",
		Value:   19,
		Message: "No such device",
	}

	// ENOTDIR: 20
	ErrnosStr["ENOTDIR"] = Errno{
		Name:    "ENOTDIR",
		Value:   20,
		Message: "Not a directory",
	}

	ErrnosInt[20] = Errno{
		Name:    "ENOTDIR",
		Value:   20,
		Message: "Not a directory",
	}

	// EISDIR: 21
	ErrnosStr["EISDIR"] = Errno{
		Name:    "EISDIR",
		Value:   21,
		Message: "Is a directory",
	}

	ErrnosInt[21] = Errno{
		Name:    "EISDIR",
		Value:   21,
		Message: "Is a directory",
	}

	// EINVAL: 22
	ErrnosStr["EINVAL"] = Errno{
		Name:    "EINVAL",
		Value:   22,
		Message: "Invalid argument",
	}

	ErrnosInt[22] = Errno{
		Name:    "EINVAL",
		Value:   22,
		Message: "Invalid argument",
	}

	// ENFILE: 23
	ErrnosStr["ENFILE"] = Errno{
		Name:    "ENFILE",
		Value:   23,
		Message: "File table overflow",
	}

	ErrnosInt[23] = Errno{
		Name:    "ENFILE",
		Value:   23,
		Message: "File table overflow",
	}

	// EMFILE: 24
	ErrnosStr["EMFILE"] = Errno{
		Name:    "EMFILE",
		Value:   24,
		Message: "Too many open files",
	}

	ErrnosInt[24] = Errno{
		Name:    "EMFILE",
		Value:   24,
		Message: "Too many open files",
	}

	// ENOTTY: 25
	ErrnosStr["ENOTTY"] = Errno{
		Name:    "ENOTTY",
		Value:   25,
		Message: "Not a typewriter",
	}

	ErrnosInt[25] = Errno{
		Name:    "ENOTTY",
		Value:   25,
		Message: "Not a typewriter",
	}

	// ETXTBSY: 26
	ErrnosStr["ETXTBSY"] = Errno{
		Name:    "ETXTBSY",
		Value:   26,
		Message: "Text file busy",
	}

	ErrnosInt[26] = Errno{
		Name:    "ETXTBSY",
		Value:   26,
		Message: "Text file busy",
	}

	// EFBIG: 27
	ErrnosStr["EFBIG"] = Errno{
		Name:    "EFBIG",
		Value:   27,
		Message: "File too large",
	}

	ErrnosInt[27] = Errno{
		Name:    "EFBIG",
		Value:   27,
		Message: "File too large",
	}

	// ENOSPC: 28
	ErrnosStr["ENOSPC"] = Errno{
		Name:    "ENOSPC",
		Value:   28,
		Message: "No space left on device",
	}

	ErrnosInt[28] = Errno{
		Name:    "ENOSPC",
		Value:   28,
		Message: "No space left on device",
	}

	// ESPIPE: 29
	ErrnosStr["ESPIPE"] = Errno{
		Name:    "ESPIPE",
		Value:   29,
		Message: "Illegal seek",
	}

	ErrnosInt[29] = Errno{
		Name:    "ESPIPE",
		Value:   29,
		Message: "Illegal seek",
	}

	// EROFS: 30
	ErrnosStr["EROFS"] = Errno{
		Name:    "EROFS",
		Value:   30,
		Message: "Read-only file system",
	}

	ErrnosInt[30] = Errno{
		Name:    "EROFS",
		Value:   30,
		Message: "Read-only file system",
	}

	// EMLINK: 31
	ErrnosStr["EMLINK"] = Errno{
		Name:    "EMLINK",
		Value:   31,
		Message: "Too many links",
	}

	ErrnosInt[31] = Errno{
		Name:    "EMLINK",
		Value:   31,
		Message: "Too many links",
	}

	// EPIPE: 32
	ErrnosStr["EPIPE"] = Errno{
		Name:    "EPIPE",
		Value:   32,
		Message: "Broken pipe",
	}

	ErrnosInt[32] = Errno{
		Name:    "EPIPE",
		Value:   32,
		Message: "Broken pipe",
	}

	// EDOM: 33
	ErrnosStr["EDOM"] = Errno{
		Name:    "EDOM",
		Value:   33,
		Message: "Math argument out of domain of func",
	}

	ErrnosInt[33] = Errno{
		Name:    "EDOM",
		Value:   33,
		Message: "Math argument out of domain of func",
	}

	// ERANGE: 34
	ErrnosStr["ERANGE"] = Errno{
		Name:    "ERANGE",
		Value:   34,
		Message: "Math result not representable",
	}

	ErrnosInt[34] = Errno{
		Name:    "ERANGE",
		Value:   34,
		Message: "Math result not representable",
	}

}
